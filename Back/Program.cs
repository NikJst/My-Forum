using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using System.Text;
using MyForum.Hubs;
using MyForum.Models;

var builder = WebApplication.CreateBuilder(args);


Console.WriteLine("JWT Key –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: " + builder.Configuration["Jwt:Key"]);//–ø—Ä–æ–≤–µ—Ä–∫–∞

builder.Services.AddDbContext<ForumContext>(options =>
    options.UseNpgsql(builder.Configuration.GetConnectionString("DefaultConnection")));

// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É CORS –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö–æ—Å—Ç–∞
builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowLocalhost5500", policy =>
    {
        policy.WithOrigins("http://127.0.0.1:5500", "http://localhost:5500")
              .AllowAnyMethod()
              .AllowAnyHeader()
              .AllowCredentials(); // <- –¥–æ–±–∞–≤–ª—è–µ–º
    });
});

builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(options =>
{
    options.SwaggerDoc("v1", new() { Title = "Forum API", Version = "v1" });

    // üëá –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É JWT
    options.AddSecurityDefinition("Bearer", new Microsoft.OpenApi.Models.OpenApiSecurityScheme
    {
        Name = "Authorization",
        Type = Microsoft.OpenApi.Models.SecuritySchemeType.ApiKey,
        Scheme = "Bearer",
        BearerFormat = "JWT",
        In = Microsoft.OpenApi.Models.ParameterLocation.Header,
        Description = "–í–≤–µ–¥–∏—Ç–µ JWT —Ç–æ–∫–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ: Bearer {your token}"
    });
    options.AddSecurityRequirement(new Microsoft.OpenApi.Models.OpenApiSecurityRequirement
    {
        {
            new Microsoft.OpenApi.Models.OpenApiSecurityScheme
            {
                Reference = new Microsoft.OpenApi.Models.OpenApiReference
                {
                    Type = Microsoft.OpenApi.Models.ReferenceType.SecurityScheme,
                    Id = "Bearer"
                }
            },
            new string[] {}
        }
    });
});


// –≤–∫–ª—é—á–∏–ª–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
builder.Logging.ClearProviders();
builder.Logging.AddConsole();
builder.Logging.SetMinimumLevel(LogLevel.Debug);

// —Å–ª—É—à–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –ø–æ—Ä—Ç
builder.WebHost.UseUrls("http://+:8000");

// ‚Ä¶ –≤—Å–µ –≤–∞—à–∏ —Å–µ—Ä–≤–∏—Å—ã ‚Ä¶
var jwtKey = builder.Configuration["Jwt:Key"] ?? "super_secret_key_123!"; // –∏–ª–∏ –≤ appsettings
var jwtIssuer = builder.Configuration["Jwt:Issuer"] ?? "MyForum";

builder.Services.AddAuthentication(options =>
{
    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
})
.AddJwtBearer(options =>
{
    options.TokenValidationParameters = new TokenValidationParameters
    {
        ValidateIssuer = true,
        ValidateAudience = false,
        ValidateLifetime = true,
        ValidateIssuerSigningKey = true,
        ValidIssuer = jwtIssuer,
        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(jwtKey))
    };
});
//
builder.Services.AddSignalR();

//==========>
var app = builder.Build();
app.UseSwagger();

app.UseDefaultFiles();
app.UseStaticFiles();

app.UseRouting();
app.UseAuthentication();
app.UseAuthorization();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.UseCors("AllowLocalhost5500");
app.MapControllers();
app.MapHub<ForumHub>("/forumHub");// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–∞–±–∞ SignalR



if (app.Environment.IsDevelopment() || true) // üëà –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å `|| true` –ø–æ–∑–∂–µ
{
    app.UseSwagger();
    app.UseSwaggerUI(options =>
    {
        options.SwaggerEndpoint("/swagger/v1/swagger.json", "Forum API v1");
        options.RoutePrefix = "swagger"; // —á—Ç–æ–±—ã Swagger –±—ã–ª –ø–æ –∞–¥—Ä–µ—Å—É /swagger
    });
}

app.MapControllers();

// –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –∫–æ—Ä–Ω—è


// –≤—ã–≤–æ–¥–∏–º —è–≤–Ω—ã–π –º–∞—Ä–∫–µ—Ä –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
Console.WriteLine(">>>>> –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –∑–∞–ø—É—Å–∫—É <<<<<");

using (var scope = app.Services.CreateScope())
{
    var dbContext = scope.ServiceProvider.GetRequiredService<ForumContext>();
    dbContext.Database.Migrate();
}
app.Run();